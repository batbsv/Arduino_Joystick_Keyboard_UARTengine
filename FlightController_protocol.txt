разрабатываем протокол обмена нашего джойстика с внешним миром через UART,
для  Leonardo это Serial1 uart
1) Аналоговые переменные
2) Кнопки джойстика
3) Кнопки клавиатуры
4) Сдвиговые кнопки
5) движ мыши  ( не уверен)
6) кнопки мыши( не уверен)

1) Аналоговые оси

8 осей
x,y,z, rx, ry, rz, s1, s2
| | |   |   |   |  |   |
a,b,c,  d,  e,  f, g,  h
название каждой оси будет соответствовать определенная буква
значение оси передается как положительное число от 0 до максимального,
(это не точно, проблема в том что правильно обработать  int и unsigned int в ардуино будет проблематично,но я работаю как раз над этим)
установленного параметром S для каждой оси отдельно
Желательно те оси которые изменяются через UART,не использовать в головном контроллере.
например, если основной джойстик исользуем X,Y,Z,S1, то через UART изменяем напрямую оси rX,rY,rZ,S2.
Так мы избежим конфликтов .

int (16) value параметр 0-65535

"Sax"
"Sbx"
"Scx"
"Sdx"
"Sex"
"Sfx"
"Sgx"
"Shx"
-x  установочный максимальный параметр для оси 
"Sd512"     - максимальное значение  оси rx = 512
"Se32767"   - максимальное значение  оси ry = 32767

A-аналог
"Aax"
"Abx"
"Acx"
"Adx'
....
"Ahx"
"Ab1023"   - joystick axis y = 1023,
"Аe2056"   - joystick axis ry= 2056,

"Sa4095" - устанавливает диапазон приема из UART для оси X от 0 до 4095 ( 12бит )
"Aa800"  - x=800 диапазона 0 до 4095
               |          /      /
    x = map( 800   ,  0   ,  4095  ,   -2047 ,2047);
после приема значения для оси преобразуем его в диапазон значений принятых для оси X в настройках самого джойстика ,
 ( Joystick.setXAxisRange(-2047,2047);) 
 
  Joystick.setXAxis( x); - устанавливаем оси Х джойстика значение x.
  
 Реализация алгоритма на языке ардуино:

создаем массив UARTaxis [8] из 8 элементов ,в нем мы будем хранить данные для каждой оси которые будем принимать из  UART
  int UARTaxis  [8]= {0,0,0,0,0,0,0,0};
  int UARTaxiss  [8]= {1023,1023,1023,1023,1023,1023,1023,1023};
второй массив, это массив максимальных значений для каждой оси по умолчанию. изменить их можно  S командой принятой из UART
для любой оси. 
так как за единицу времени через UART изменяется только одна ось,введем переменную которая будет содержать цифровой 
индекс измененной оси.если он отличен от нуля,значит по UART произошло изменение по одной из осей и это надо отработать.
мы используем Serial а не Serial1 , так как это будет удобно для тестирования с терминала компьютера. в окончательной 
версии естественно надо будет заменить Serial на Serial1 . 
    incomingByte = Serial.read();
  if(incomingByte =='A')
  {
incomingByte = Serial.read();
Serial.write(incomingByte);
  switch (incomingByte)
  {
    case  'a':  
    UARTaxis  [0]= Serial.parseInt();
    UARTindex=1;
    break;
    case  'b':
    UARTaxis  [1]=Serial.parseInt();
     UARTindex=2;
    break;
    case  'c':
    UARTaxis  [2]=Serial.parseInt();
     UARTindex=3;
    break;
    case  'd':
    UARTaxis  [3]=Serial.parseInt();
     UARTindex=4;
    break;
    case  'e':
    UARTaxis  [4]=Serial.parseInt();
     UARTindex=5;
    break;
    case  'f':
    UARTaxis  [5]=Serial.parseInt();  
     UARTindex=6;
    break;
    case  'g':
    UARTaxis  [6]=Serial.parseInt();  
     UARTindex=7;
    break;     
    case  'h':
    UARTaxis  [7]=Serial.parseInt();
     UARTindex=8;
    break;     
    
    default:
    UARTindex=0;
    break;
    }
  }
 
на выходе имеем в одном из элементов массива UARTaxis[8] принятое значение для оси ,
а (UARTindex-1) содержит индекс элемента в массиве UARTaxis .


для приема и обработки команды S примерно так же поступаем.

  if(incomingByte =='S')
  {
incomingByte = Serial.read();
Serial.write(incomingByte);
  switch (incomingByte)
  {
    case  'a':  
    UARTaxiss  [0]= Serial.parseInt();
    break;
    case  'b':
    UARTaxiss  [1]=Serial.parseInt();
    break;
    case  'c':
    UARTaxiss  [2]=Serial.parseInt();
    break;
    case  'd':
    UARTaxiss  [3]=Serial.parseInt();
    break;
    case  'e':
    UARTaxiss  [4]=Serial.parseInt();
    break;
    case  'f':
    UARTaxiss  [5]=Serial.parseInt();  
    break;
    case  'g':
    UARTaxiss  [6]=Serial.parseInt();  
    break;     
    case  'h':
    UARTaxiss  [7]=Serial.parseInt();
    break;     
    default:
    break;
    }
  }




  
2) кнопки джойстика

Jpx  joystick press button x
Jrx  joystick release button x

//Ju0   joystick button 0 up
//Jd1   joystick button 1 down
"Jr4"   joystick button 4 release
"Jp5"   joystick button 5 press


для кнопок джойстика так-же

 if(incomingByte =='J')
  {
incomingByte = Serial.read();
Serial.write(incomingByte);
  switch (incomingByte)
  {
//   case  'd':  
//   Joystick.setButton(Serial.parseInt(),1);
//   break;
//   case  'u':
//   Joystick.setButton(Serial.parseInt(),0);
//   break;
    case  'r':
   	Joystick.releaseButton(Serial.parseInt());
    break;
    case  'p':
    Joystick.pressButton(Serial.parseInt());
    break;
    default:
    break;
    }
  
  }  
в принципе, пока достаточно двух команд, нажатие и отпускание




3) кнопки клавииатуры
для работы клавиатуры понадобится подключить 
стандартную библиотеку  #include <Keyboard.h>

Kd	keyboard down
Ku	keyboard up
Kp	keyboard press
Kr	keyboard release
Ka	keyboard all release

4) сдвиговые кнопки
Ctrl
Shift
Alt

Ma 	keyboard press alt
Ms	keyboard press shift
Mc	keyboard press ctrl

Mc+Kp"a"+Ka  = ctrl+a

но это не точно

вот тут пока выходит загвоздка, какой вариант нажатия выбрать?
пока не решил,перебираю варианты.
рассматриваю варианты реализации одновременного нажатия клавиш с модификаторами ctrl alt shift и т.д.
5) движ мыши

6) кнопки мыши


--
Определения Леонардо для клавиш-модификаторов перечислены ниже:
Ключ	Шестнадцатеричное значение	Десятичное значение
KEY_LEFT_CTRL	0x80	128
KEY_LEFT_SHIFT	0x81	129
KEY_LEFT_ALT	0x82	130
KEY_LEFT_GUI	0x83	131
KEY_RIGHT_CTRL	0x84	132
KEY_RIGHT_SHIFT	0x85	133
KEY_RIGHT_ALT	0x86	134
KEY_RIGHT_GUI	0x87	135
KEY_UP_ARROW	0xDA	218
KEY_DOWN_ARROW	0xD9	217
KEY_LEFT_ARROW	0xD8	216
KEY_RIGHT_ARROW	0xD7	215
KEY_BACKSPACE	0xB2	178
KEY_TAB			0xB3	179
KEY_RETURN		0xB0	176
KEY_ESC			0xB1	177
KEY_INSERT		0xD1	209
KEY_DELETE		0xD4	212
KEY_PAGE_UP		0xD3	211
KEY_PAGE_DOWN	0xD6	214
KEY_HOME		0xD2	210
KEY_END			0xD5	213
KEY_CAPS_LOCK	0xC1	193
KEY_F1			0xC2	194
KEY_F2			0xC3	195
KEY_F3			0xC4	196
KEY_F4			0xC5	197
KEY_F5			0xC6	198
KEY_F6			0xC7	199
KEY_F7			0xC8	200
KEY_F8			0xC9	201
KEY_F9			0xCA	202
KEY_F10			0xCB	203
KEY_F11			0xCC	204
KEY_F12			0xCD	205
